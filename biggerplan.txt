Script features:
  - Codecave functions, process return values.
  - Timers. [effectively just another event with special processing]
  - HTTP requests.
    - Process request in separate thread, then post result back to main thread.
	- What if a script performs a request and is then unloaded?
	  - Stop the script unloading, and set a global which indicates it's waiting to unload.
	  - In this state block all other functions.
	  - Once request has been processed (and all other outstanding) unload it.
	  - When in this state, remove from main list -- the callback will still hold a reference to it.
	- Maybe limit how many requests a script can have outstanding.
  - Scripts should be able to share data between themselves.
    - Have global registry in phasor and each script has a cache of the object.
	  - Updated by a call to get the value and save with another.
  - Script should be able to load/unload others. 
  - For script loading/unloading and timers
    - Use std::list 
	- Stop scripts unloading themselves, and timers removing themselves (other than
	  by return value of their callback).
    - This means no special handling is required.
  - Should script contexts be tracked? What function is executing, and what type of
    function it is (event, timer, http response) etc.
  - Maybe a completion function which sends scripts the value being used?
  - Script "threading"
    - Maybe.
  - When unloading the server
    - Force close everything. Don't wait for any script events to complete.
	- Done by closing the auxillary thread, threading transfer stuff and then scripts.
  - For script error logging send a stream to script class on creation.
    - Move namespaced code into a class.
	
Could use shared_ptrs for script state, if a script is being closed but its use_count is > 1
then call OnScriptUnload and set the unload global, but don't actually unload. 
This means the actual script unloading should happen in the state's destructor	
